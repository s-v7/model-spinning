#!/bin/bash

# Default timeout
TIME="1h"

# Generic time parsing function that converts various formats to SLURM format (HH:MM:SS)
parse_duration() {
    local input="$1"
    local hours=0
    local minutes=0
    local seconds=0

    # Handle SLURM format (HH:MM:SS)
    if [[ $input =~ ^([0-9]+):([0-9]+):([0-9]+)$ ]]; then
        echo "$input"
        return
    fi

    # Handle multiple formats
    while [[ -n "$input" ]]; do
        # Extract number and unit
        if [[ $input =~ ^([0-9]+)([hms]?) ]]; then
            local num=${BASH_REMATCH[1]}
            local unit=${BASH_REMATCH[2]}
            
            case $unit in
                h|"") # Default to hours if no unit
                    ((hours += num))
                    ;;
                m)
                    ((minutes += num))
                    ;;
                s)
                    ((seconds += num))
                    ;;
            esac
            
            # Remove the matched part
            input=${input#${BASH_REMATCH[0]}}
        else
            break
        fi
    done

    # Normalize time (carry over)
    ((minutes += seconds / 60))
    ((seconds %= 60))
    ((hours += minutes / 60))
    ((minutes %= 60))

    printf "%d:%02d:%02d" "$hours" "$minutes" "$seconds"
}

# Function to display help
function show_help() {
    echo "Usage: $0 --model <model_name> [--time <timeout>] [model options]"
    echo
    echo "Required options:"
    echo "  --model              Name of the model to launch"
    echo
    echo "Optional options:"
    echo "  --time              Time duration for the job. Examples: 2h, 1h30m, 90m, 1:30:00. Default: 1h"
    echo "  --help              Show this help message and exit"
    echo
    echo "Additional options:"
    echo "All additional arguments will be passed directly to the sp command."
    echo "Available sp options:"
    echo
    cat sp-docs.txt
    exit 0
}

# Parse only the script-specific arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --time) TIME="$2"; shift 2 ;;
        --model) MODEL="$2"; shift 2 ;;
        --help) show_help ;;
        *) break ;;
    esac
done

# Check if model is provided
if [ -z "$MODEL" ]; then
    echo "Error: --model is required."
    show_help
    exit 1
fi

# Store remaining arguments for sp command
SP_ARGS="$@"

# Convert timeout to SLURM format
TIME=$(parse_duration "$TIME")

# Construct the full `sp serve` command
#SP_SERVE_COMMAND="vllm serve ${MODEL} \
SP_SERVE_COMMAND="sp serve ${MODEL} \
    --host 0.0.0.0 \
    --port 8080 \
    ${SP_ARGS}"

# Print the constructed command
echo "Command for serving:"
echo "${SP_SERVE_COMMAND}"

# Create SLURM script content
JOB_SCRIPT=$(cat <<EOF
#!/bin/bash
#SBATCH --job-name=dashboard-model-${MODEL}
#SBATCH --output=/users/ibadanin/logs/dashboard-model-%j.out
#SBATCH --error=/users/ibadanin/logs/dashboard-model-%j.err
#SBATCH --container-writable
# #SBATCH --partition=debug
#SBATCH --partition=normal
#SBATCH --time=${TIME}
#SBATCH --ntasks-per-node=1
#SBATCH --dependency=singleton
#SBATCH --account=a-a06
# #SBATCH --environment=/capstor/store/cscs/swissai/a09/xyao/llm_service/sp.toml
#SBATCH --environment=/capstor/store/cscs/swissai/a09/xyao/llm_service/clariden/sp-arm.toml
# #SBATCH --environment=/capstor/store/cscs/swissai/a09/xyao/llm_service/clariden/vllm.toml

export NCCL_SOCKET_IFNAME=lo
export GLOO_SOCKET_IFNAME=lo
export PROMETHEUS_MULTIPROC_DIR=/ocfbin/scratch
# export SP_NCCL_SO_PATH=/usr/lib/x86_64-linux-gnu/
export SP_NCCL_SO_PATH=/usr/lib/aarch64-linux-gnu/

# OCF=/ocfbin/ocf-v2
# OCF=/ocfbin/ocf-arm
# It doesn't allow switching between different executables
/ocfbin/ocf-arm start --bootstrap.addr /ip4/148.187.108.172/tcp/43905/p2p/Qmb9DHNUeVaB4asfiGY1mY4KhSDp61sEoLwZqLqUSowi9a --subprocess "${SP_SERVE_COMMAND}" \
    --service.name llm \
    --service.port 8080
EOF
)

# Save the script to a file
SCRIPT_PATH="/users/ibadanin/dashboard-scripts/model_launch_$(head -c 10 /dev/urandom | xxd -p).sh"
echo "$JOB_SCRIPT" > "$SCRIPT_PATH"
chmod +x "$SCRIPT_PATH"

# Submit the job and capture the full output
SBATCH_OUTPUT=$(sbatch "$SCRIPT_PATH")
echo "$SBATCH_OUTPUT"

# Extract the job ID from the output
JOBID=$(echo "$SBATCH_OUTPUT" | tail -n1 | grep -o '[0-9]\+')

# Clean up the script after submission
# rm "$SCRIPT_PATH"

echo Job submitted. To know estimated time of start, run:
echo  squeue --me --start
echo
echo Your job ID is: $JOBID
echo
echo Useful links:
echo - Dashboard \(all models\): https://fmapi.swissai.cscs.ch/dashboard
echo - Check model status: https://fmapi.swissai.cscs.ch/job/$JOBID
echo - Chat with model: https://fmapi.swissai.cscs.ch/chat
echo
echo To cancel this job/model, run:
echo  scancel $JOBID
echo 
echo "[Warning] This Command is deprecated. Please use the new command `spin-model.py` instead."